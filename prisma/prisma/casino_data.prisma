generator client {
    provider = "prisma-client-js"
    output   = "./generated/casino_data"
}

datasource db {
    provider = "postgres"
    url      = "postgres://postgres:Alibaba@1408@localhost:5433/casino_data"
}

model Admin {
    id          String          @id @default(uuid()) @db.Uuid
    email       String          @unique @db.VarChar(30)
    password    String          @db.VarChar(100)
    name        String          @unique @db.VarChar(30)
    token       String?         @db.VarChar(100)
    createdAt   DateTime        @default(now())
    updatedAt   DateTime?       @updatedAt
    accessToken String?         @db.VarChar(100)
    history     ActionHistory[] @relation("AdminActionHistory")
    agent       Agent[]
    noticelist  NoticeList[]
}

model Agent {
    id          String          @id @default(uuid()) @db.Uuid
    email       String          @unique @db.VarChar(30)
    password    String          @db.VarChar(100)
    name        String          @unique @db.VarChar(30)
    active      Boolean         @default(true)
    token       String?         @db.VarChar(100)
    quota       Int             @default(0)
    createdAt   DateTime        @default(now())
    updatedAt   DateTime?       @updatedAt
    accessToken String?         @db.VarChar(100)
    adminId     String?         @db.Uuid
    history     ActionHistory[] @relation("AgentActionHistory")
    createdBy   Admin?          @relation(fields: [adminId], references: [id])
    users       User[]
}

model User {
    id               String             @id @default(uuid()) @db.Uuid
    email            String             @unique(map: "user_email") @db.VarChar(30)
    name             String             @unique(map: "user_name") @db.VarChar(30)
    password         String             @db.VarChar(100)
    headImage        String             @db.VarChar(100)
    active           Boolean            @default(true)
    token            String?            @db.VarChar(100)
    createdAt        DateTime           @default(now())
    updatedAt        DateTime?          @updatedAt
    accessToken      String?            @db.VarChar(100)
    agentId          String?            @db.Uuid
    gameSessionId    String?            @db.Uuid
    history          ActionHistory[]    @relation("UserActionHistory")
    balance          Balance[]
    betDetailHistory BetDetailHistory[]
    paymentHistory   PaymentHistory[]
    createdBy        Agent?             @relation(fields: [agentId], references: [id])
    gameSession      GameSession?       @relation(fields: [gameSessionId], references: [id])
}

model ActionHistory {
    id           String   @id @default(uuid()) @db.Uuid
    type         Int
    newValueJson Json?
    ip           String   @db.VarChar(20)
    createdAt    DateTime @default(now())
    userId       String?  @db.Uuid
    agentId      String?  @db.Uuid
    adminId      String?  @db.Uuid
    admin        Admin?   @relation("AdminActionHistory", fields: [adminId], references: [id])
    agent        Agent?   @relation("AgentActionHistory", fields: [agentId], references: [id])
    user         User?    @relation("UserActionHistory", fields: [userId], references: [id])
}

model Balance {
    id        String    @id @default(uuid()) @db.Uuid
    balance   Int
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    ownerId   String    @db.Uuid
    owner     User      @relation(fields: [ownerId], references: [id])
}

model GameList {
    id               Int                @id
    eGameName        String             @db.VarChar(100)
    cGameName        String             @db.VarChar(30)
    type             Int
    json             Json?
    createdAt        DateTime           @default(now())
    updatedAt        DateTime?          @updatedAt
    betDetailHistory BetDetailHistory[]
}

model PaymentHistory {
    id          String    @id @default(uuid()) @db.Uuid
    beforeScore Int
    changeScore Int
    newScore    Int
    approval    Boolean   @default(false)
    createdAt   DateTime  @default(now())
    approvalAt  DateTime? @updatedAt
    ownerId     String    @db.Uuid
    owner       User      @relation(fields: [ownerId], references: [id])
}

model BetDetailHistory {
    id          String   @id @default(uuid()) @db.Uuid
    beforeScore Int
    betScore    Int
    winScore    Int
    newScore    Int
    createdAt   DateTime @default(now())
    ownerId     String   @db.Uuid
    gameId      Int
    gameList    GameList @relation(fields: [gameId], references: [id])
    owner       User     @relation(fields: [ownerId], references: [id])
}

model NoticeList {
    id        String    @id @default(uuid()) @db.Uuid
    status    Boolean   @default(false)
    txt       String    @db.VarChar(255)
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    adminId   String    @db.Uuid
    createdBy Admin     @relation(fields: [adminId], references: [id])
}

model GameSession {
    id            String          @id @unique(map: "game_session_id") @default(uuid()) @db.Uuid
    gameId        Int
    createdAt     DateTime        @default(now())
    playerSession PlayerSession[]
    user          User[]
}

model PlayerSession {
    id            String      @id @unique(map: "player_session_id") @default(uuid()) @db.Uuid
    gameSessionId String      @db.Uuid
    betAmount     Int
    betLines      Int?
    betResult     Int
    createdAt     DateTime    @default(now())
    gameSession   GameSession @relation(fields: [gameSessionId], references: [id])
}
